# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# ============================ 窗口设置 ==========================
# focus window : 激活窗口快捷键
alt - r : yabai -m window --focus recent
alt - h : yabai -m window --focus west
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
alt - l : yabai -m window --focus east

# swap managed window : 交换窗口位置
shift + alt - x : yabai -m window --swap recent
shift + alt - h : yabai -m window --swap west
shift + alt - j : yabai -m window --swap south
shift + alt - k : yabai -m window --swap north
shift + alt - l : yabai -m window --swap east

# move managed window : 移动窗口位置
shift + cmd - h : yabai -m window --warp west
shift + cmd - j : yabai -m window --warp south
shift + cmd - k : yabai -m window --warp north
shift + cmd - l : yabai -m window --warp east

# balance size of windows : 恢复原始窗口大小
shift + alt - 0 : yabai -m space --balance

# make floating window fill screen :  窗口悬浮最大化
ctrl + alt - up : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen : 窗口悬浮铺满屏幕左侧 
ctrl + alt - left : yabai -m window --grid 1:2:0:0:1:1

# make floating window fill right-half of screen : 窗口悬浮铺满屏幕右侧
ctrl + alt - right  : yabai -m window --grid 1:2:1:0:1:1

# 切换窗口浮动且居中屏幕
alt - t : yabai -m window --toggle float;yabai -m window --grid 4:4:1:1:2:2

# 最大化
ctrl + alt - return : yabai -m window --toggle zoom-fullscreen; sketchybar --trigger window_focus

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq) : 创建一个新桌面,将当前活动的窗口发送到新桌面并跳转
shift + cmd - n : yabai -m space --create && \
                   index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
                   yabai -m window --space "${index}" && \
                   yabai -m space --focus "${index}"
 
# create desktop and follow focus - uses jq for parsing json (brew install jq) : 创建一个新的桌面并跳转
cmd + alt - n : yabai -m space --create && \
                 index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
                 yabai -m space --focus "${index}"

# destroy desktop : 删除桌面
cmd + alt - q : yabai -m space --focus prev && yabai -m space recent --destroy

# fast focus desktop : 快速切换桌面
alt - r : yabai -m space --focus recent
alt - 1 : yabai -m space --focus  1
alt - 2 : yabai -m space --focus  2
alt - 3 : yabai -m space --focus  3
alt - 4 : yabai -m space --focus  4
alt - 5 : yabai -m space --focus  5
alt - 6 : yabai -m space --focus  6
alt - 7 : yabai -m space --focus  7
alt - 8 : yabai -m space --focus  8
alt - 9 : yabai -m space --focus  9
alt - 0 : yabai -m space --focus 10

# send window to desktop and follow focus : 发送窗口至桌面并切换
ctrl + alt - r : yabai -m window --space recent && yabai -m space --focus recent
ctrl + alt - j : yabai -m window --space prev && yabai -m space --focus prev
ctrl + alt - l : yabai -m window --space next && yabai -m space --focus next
ctrl + alt - 1 : yabai -m window --space  1 && yabai -m space --focus 1
ctrl + alt - 2 : yabai -m window --space  2 && yabai -m space --focus 2
ctrl + alt - 3 : yabai -m window --space  3 && yabai -m space --focus 3
ctrl + alt - 4 : yabai -m window --space  4 && yabai -m space --focus 4
ctrl + alt - 5 : yabai -m window --space  5 && yabai -m space --focus 5
ctrl + alt - 6 : yabai -m window --space  6 && yabai -m space --focus 6
ctrl + alt - 7 : yabai -m window --space  7 && yabai -m space --focus 7
ctrl + alt - 8 : yabai -m window --space  8 && yabai -m space --focus 8
ctrl + alt - 9 : yabai -m window --space  9 && yabai -m space --focus 9
ctrl + alt - 0 : yabai -m window --space 10 && yabai -m space --focus 10

# focus monitor : 切换显示器
cmd + alt - r  : yabai -m display --focus recent
cmd + alt - j  : yabai -m display --focus prev
cmd + alt - l  : yabai -m display --focus next
cmd + alt - 1  : yabai -m display --focus 1
cmd + alt - 2  : yabai -m display --focus 2

# send window to monitor and follow focus : 发送窗口至对应显示器且切换
ctrl + cmd - r  : yabai -m window --display recent && yabai -m display --focus recent
ctrl + cmd - j  : yabai -m window --display prev && yabai -m display --focus prev
ctrl + cmd - l  : yabai -m window --display next && yabai -m display --focus next
ctrl + cmd - 1  : yabai -m window --display 1 && yabai -m display --focus 1
ctrl + cmd - 2  : yabai -m window --display 2 && yabai -m display --focus 2

# toggle topmost (keep above other windows) : 置顶窗口
alt - o : yabai -m window --toggle topmost

# toggle picture-in-picture : 画中画
alt - p : yabai -m window --toggle border --toggle pip

# 旋转窗口布局
alt - r : yabai -m space --rotate 90
alt + shift - r : yabai -m space --rotate 180

# change layout of desktop : 改变窗口布局
# ctrl + alt - a : yabai -m space --layout bsp
# ctrl + alt - d : yabai -m space --layout float
# ctrl + alt - s : yabai -m space --layout $(yabai -m query --spaces --space | jq -r 'if .type == "bsp" then "float" else "bsp" end')

# 重启 Yabai 与 Sketchybar
cmd + alt - r : /usr/bin/env osascript <<< "display notification \"正在重启 Yabai、Skhd 和 Sketchybar\" with title \"提示\""; yabai --restart-service; skhd --restart-service; brew services restart sketchybar;

# ======================== APPS =========================
# Alacritty
cmd + shift - t : open -a Alacritty
